- name: Install packages that allow apt to be used over HTTPS
  become: true
  apt:
    name: "{{packages}}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common

- name: disable firewall service for 
  become: true
  community.general.ufw:
    state: disabled

- name: Disable SWAP 
  become: true
  shell: |
    swapoff -a

- name: Check whether swap is off or not 
  become: true
  command: grep "swap" /etc/fstab
  register: swapcheck
  check_mode: no
  ignore_errors: yes
  changed_when: no


- name: Disable SWAP in fstab 
  become: true
  lineinfile:
    path: /etc/fstab
    regexp: 'swap'
    state: absent
  when: swapcheck.rc ==0


- name: Checking whether net.bridge.bridge.nf-call-iptables is set to 1
  become: true
  command: grep "net.bridge.bridge-nf-call-iptables" /etc/sysctl.d/kubernetes.conf
  register: netbridgecheck
  check_mode: no
  ignore_errors: yes
  changed_when: no


- name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
  become: true
  shell: |
          cat >>/etc/sysctl.d/kubernetes.conf<<EOF
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          EOF
  args:
    executable: /bin/bash
  when: netbridgecheck !=0
#    value: 1
#state: present



- name: Add an apt signing key for Docker
  become: true
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add an apt signing key for kubernetes
  become: true
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add apt repository for stable version of docker
  become: true
  apt_repository:
    repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable'
    state: present

- name: Add apt repository for stable version of kubernetes
  become: true
#  gather_facts: true
  apt_repository:
    repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main'
    state: present
    filename: kubernetes.list

- name: "Update Repository cache"
  become: true
  apt:
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true

- name: install Docker
  become: true
  apt:
    name: docker-ce=5:19.03.10~3-0~ubuntu-focal
    state: present
    update_cache: true

- name: hold docker
  become: true
  dpkg_selections:
    name: '{{item}}'
    selection: hold
  loop: '{{packages}}'
  vars:
     packages:
     - docker-ce

- name: install containerd.io
  become: true
  apt:
    name: containerd.io
    state: present
    update_cache: true

- name: Check whether docker is configured to have systemd
  become: true
  command: grep "cgroupdriver=systemd" /lib/systemd/system/docker.service
  register: checkmyconf
  check_mode: no
  ignore_errors: yes
  changed_when: no
 
- name: changing the cgroupdriver to systemd
  become: true
  lineinfile:
    path: "/lib/systemd/system/docker.service"
    backrefs: yes
    regexp: "^(.*ExecStart.*)$"
    line: '\1 --exec-opt native.cgroupdriver=systemd'
  when: checkmyconf.rc !=0


- name: systemctl daemon-reload
  become: true
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Remove dependencies that are no longer required
  become: true
  apt:
    autoremove: yes


- name: Install Kubernetes binaries
  become: true
  apt: 
    name: "{{item}}"
    state: present
    force: True
    update_cache: yes
  loop: '{{packages}}'
  vars:
    packages:
    - kubectl=1.18.5-00
    - kubeadm=1.18.5-00
    - kubelet=1.18.5-00 

- name: hold kubernetes packages
  become: true
  dpkg_selections:
    name: "{{item}}"
    selection: hold
  loop: '{{packages}}'
  vars:
    packages:
    - kubectl 
    - kubeadm
    - kubelet 
  
- name: start Docker
  become: true
  service:
    name: docker
    state: restarted
    enabled: true
  when: checkmyconf.rc !=0

- name: start Docker
  become: true
  service:
    name: docker
    state: started
    enabled: true

- name: start kubelet
  become: true
  service:
     name: kubelet
     state: started
     enabled: true


- name: setting the ip of the current machine
  set_fact:
    reboot_ip: "{{hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2]}}"
  when: swapcheck.rc ==0

- name: reboot ALL machines
  become: yes
  reboot:
  when: swapcheck.rc ==0

- name: Wait for connection
  ansible.builtin.wait_for:
    host: "{{reboot_ip}}"
    port: 22
    timeout: 120
    search_regex: OpenSSH
  when: swapcheck.rc ==0

- name: start Docker
  become: true
  service:
    name: docker
    state: restarted
    enabled: true
  when: swapcheck.rc ==0

- name: start kubelet
  become: true
  service:
     name: kubelet
     state: started
     enabled: true
  when: swapcheck.rc ==0

